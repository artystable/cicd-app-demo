{"version":3,"sources":["listItems.js","MUIDataTable.js","Dashboard.js","serviceWorker.js","index.js"],"names":["mainListItems","ListItem","button","ListItemIcon","ListItemText","primary","component","Link","to","ListSubheader","inset","DemoMUIDataTable","props","state","columns","data","fetch","then","response","json","catch","err","res","setState","console","log","this","title","options","filterType","responsive","React","Component","Copyright","Typography","variant","color","align","href","Date","getFullYear","useStyles","makeStyles","theme","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","Boolean","window","location","hostname","match","ReactDOM","render","classes","useState","open","setOpen","className","CssBaseline","AppBar","clsx","Toolbar","IconButton","edge","aria-label","onClick","noWrap","Drawer","Divider","List","Container","maxWidth","Grid","item","xs","Paper","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c466ea19.chunk.js","sourcesContent":["import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ReceiptIcon from '@material-ui/icons/Receipt';\nimport HelpOutlineSharpIcon from '@material-ui/icons/HelpOutlineSharp';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport Link from '@material-ui/core/Link';\n\nexport const mainListItems = (\n  <div>\n    <ListItem button>\n      <ListItemIcon>\n        <ReceiptIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Invoice Manager\" />\n    </ListItem>\n\n\n    <ListItem button component={Link} to=\"/mailto:arturostabl@gmail.com\">\n      <ListItemIcon>\n        <HelpOutlineSharpIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Support\" />\n    </ListItem>\n    \n  </div>\n);\n\nexport const secondaryListItems = (\n  <div>\n    <ListSubheader inset>Saved reports</ListSubheader>\n    <ListItem button>\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Current month\" />\n    </ListItem>\n    <ListItem button>\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Last quarter\" />\n    </ListItem>\n    <ListItem button>\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Year-end sale\" />\n    </ListItem>\n  </div>\n);\n","\r\nimport React from 'react';\r\nimport MUIDataTable from \"mui-datatables\";\r\n\r\nclass DemoMUIDataTable extends React.Component {\r\n\r\n    constructor(props, state){\r\n        super(props)\r\n\r\n        this.state = { columns: [], data: [] }\r\n    }\r\n\r\n    theData() {\r\n        const url = 'https://gist.githubusercontent.com/artystable/819ba3d58718e6f1a2cbc64b003bf55d/raw/0b3a85de5159c1f8c51d2c6f29c39e34aebd567d/test-gist-obj.json'\r\n    \r\n        const testData = fetch(url)\r\n                              .then(response => {\r\n                                \r\n                                return response.json()\r\n                              })\r\n                              .then(data => {\r\n                                return data\r\n                              })\r\n                              .catch(err => {\r\n                                // Handle error here\r\n                                return 'Whoopsies!! Error: ' + err\r\n                              })\r\n        return testData\r\n    }\r\n\r\n    componentDidMount(){\r\n      \r\n      fetch(`https://gist.githubusercontent.com/artystable/819ba3d58718e6f1a2cbc64b003bf55d/raw/0b3a85de5159c1f8c51d2c6f29c39e34aebd567d/test-gist-obj.json`)\r\n        .then(res => res.json())\r\n        .then(json => this.setState({ columns: json.columns, data: json.data }));\r\n    }\r\n\r\n  render() {\r\n\r\n    const options = {\r\n      filterType: \"dropdown\",\r\n      responsive: \"scroll\"\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {console.log(this.state.data)}\r\n      <MUIDataTable\r\n        title={\"Invoice Manager\"}\r\n        data={this.state.data}\r\n        columns={this.state.columns}\r\n        options={options}\r\n      />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DemoMUIDataTable","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport { mainListItems } from './listItems';\n\nimport DemoMUIDataTableComponent from './MUIDataTable';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://artystable.github.io\">\n        Arty Stable\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nexport default function Dashboard() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            Invoice Admin\n          </Typography>\n              \n              {/* Originally used for other Icons*/}\n\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>{mainListItems}</List>\n          \n          {/* Originally used for <Divider /> and \"<List>{secondaryListItems}</List>\" */}\n\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={3}>\n\n            {/* Originally used for \"Chart\" and other similar components.*/}\n\n            <Grid item xs={12}>\n              <Paper className={classes.paper}>\n\n                <DemoMUIDataTableComponent />\n\n                {/* Originally used for \"<Orders />\" component.\" */}\n\n              </Paper>\n            </Grid>\n          </Grid>\n        </Container>\n        <Copyright />\n      </main>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\nimport Dashboard from './Dashboard';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Dashboard />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}